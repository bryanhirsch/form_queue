<?php
/**
 * @file form_queue.module
 * Provides queue backend for selected Drupal forms.
 */

/**
 * Implements hook_menu().
 */
function form_queue_menu() {
  $items = array();

  $items['admin/config/system/form-queue'] = array(
    'title' => 'Forms Queue',
    // @todo Make form selection admin configurable.
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function form_queue_form_alter(&$form, &$form_state, $form_id) {

  $form_queue_is_enabled = form_queue_is_enabled_for_form_id($form_id);
  if (!$form_queue_is_enabled) {
    return;
  }

  // @todo Note: We're not suppressing validation handlers here right now.
  // If form validation hits the DB, this is potentially an obstacle to
  // scalability. Consider suppressing validation or providing a form-by-form
  // option for suppressing validation here.

  // Suppress submit handlers which normally fire on-demand, upon submission.
  // We only want to call our own submit handler upon submission.
  $suppressed_submit_handlers = $form['#submit'];
  $form['#submit'] = array('form_queue_submit');

  // Keep track of suppressed submit handlers so they can be invoked later.
  $form['form_queue_suppressed_submit_handlers']['#type'] = 'hidden';
  $form['form_queue_suppressed_submit_handlers']['#value'] = $suppressed_submit_handlers;
}

/**
 * Determine if form_queue is enabled for form.
 *
 * @param string $form_id
 *   Unique identifier for form.
 *
 * @return bool
 *   TRUE, form_queue is enabled. FALSE, not enabled.
 */
function form_queue_is_enabled_for_form_id($form_id) {
  // Check to see if this form is a webform. (Webform form IDs are prefixed with
  // 'webform_client'.)
  //
  // @todo Currently this is hard-coded to webforms. Even better would be to
  // have an admin config form with a text area that lets people input form IDs
  // or form_id prefixes. This way node forms and entity forms could be easily
  // handled this way too.
  $is_enabled = (bool) strpos($form_id, 'ebform_client');
  return $is_enabled;
}

/**
 * Custom form submit handler.
 */
function form_queue_submit($form, $form_state) {
  $item = new stdClass();
  $item->form = $form;
  $item->form_state = $form_state;

  // Queue form submission rather than process it now.
  form_queue_create_item($item);
}

/**
 * Create/Insert an item into the form_queue_submissions queue.
 *
 * @param stdClass $item
 *   Data to queue.
 */
function form_queue_create_item(stdClass $item) {
  $queue = DrupalQueue::get('form_queue_submissions');
  $queue->createQueue();
  $queue->createItem($item);
}

/**
 * Implements hook_cron_queue_info().
 */
function form_queue_cron_queue_info() {
  return array(
    'form_queue_submissions' => array(
      'worker callback' => 'form_queue_process_submissions',
      'time' => 30,
      'skip on cron' => TRUE,
    ),
  );  
}

/**
 * Worker callback processing queue: form_queue_submissions.
 *
 * Process form submissions from the queue.
 *
 * Submitted webform data and suppressed handlers are here:
 * - $form_state['values']['submitted']
 * - $form_state['values']['form_queue_suppressed_submit_handlers']
 *
 * @param stdClass $data
 *   $form and $form_state captured upon form submission. Properties:
 *     - form
 *     - form_state
 */
function form_queue_process_submissions(stdClass $data) {
  try {
    _form_queue_validate_submitted_data($data);
    _form_queue_preprocess_submitted_data($data);
    _form_queue_process_submitted_data($data);
  }
  catch (Exception $e) {
    _form_queue_processing_failed_catch_submission_and_exception($data, $e);
  }
}

/**
 * When a form submission cannot be processed, handle failure here.
 *
 * @param stdClass $data
 *   Form submission data.
 *
 * @param Exception $e
 *   Exception caught when form processing failed.
 */
function _form_queue_processing_failed_catch_submission_and_exception(stdClass $data, Exception $e) {
  _form_queue_log_processing_failure($data, $e);
  _form_queue_requeue_item($data);
}

/**
 * Log failure processing form submission.
 *
 * @param stdClass $data
 *   Data received by submit handler that failed processing.
 *
 * @param Exception $e
 *   Exception thrown when processing failed.
 */
function _form_queue_log_processing_failure(stdClass $data, Exception $e) {
  $json = json_encode($data);
  watchdog('form_queue', $e->getMessage(), WATCHDOG_WARNING);
  // @todo Add a setting that can be toggled on and off in case admins don't want data from failed submission being blurted into syslog, dblog, etc.
  watchdog('form_queue', "Form submission: {$json}", WATCHDOG_WARNING);
}

/**
 * Return an item to the queue that has was previously removed from the queue.
 *
 * @param stdClass $data
 */
function _form_queue_requeue_item(stdClass $data) {
  watchdog('form_queue', 'Re-queuing form submission.', WATCHDOG_WARNING);
  form_queue_create_item($data);
}

/**
 * Validate submitted data. Throw exception
 * @param $data
 * @throws \Exception
 */
function _form_queue_validate_submitted_data($data) {
  // Assume data's valid until we prove it's not.
  $is_valid = TRUE;

  if (!property_exists($data, 'form') || !property_exists($data, 'form_state')) {
    throw new Exception('$data is missing required form or form_state property.');
  }

  // @todo Provide some form of validation here? Enable modules to hook in?

  return $is_valid;
}

/**
 * @param $data
 */
function _form_queue_preprocess_submitted_data($data) {
  // @todo Provide some form of sanitization here? Enable modules to hook in?
}

/**
 * @param $data
 */
function _form_queue_process_submitted_data($data) {

  // Retrieve suppressed submit handlers that were not called when form was
  // submitted and submission was queued.
  $form = $data->form;
  $form_state = $data->form_state;
  $submit_handlers = $form_state['values']['form_queue_suppressed_submit_handlers'];

  // Loop through submit handlers calling each and giving them a chance to
  // process submitted data.
  foreach ($submit_handlers as $function) {
    $function($form, $form_state);
  }

  // @todo invoke process hook?
}
